View(turbine_summary)
census_shp <- get_acs(
geography = "state",
variables = vars,
year = 2019,
geometry = TRUE) %>%
set_names(to_snake_case(colnames(.))) %>%
filter(name %in% state.name) %>%
select(name, variable, estimate) %>%
spread(variable, estimate)
vars <- c(
median_income = "B19013_001",
white = "B02001_002",
black = "B02001_003",
amer_ind = "B02001_004",
asian = "B02001_005",
na_pi = "B02001_006",
hisp = "B03001_003"
)
census_shp <- get_acs(
geography = "state",
variables = vars,
year = 2019,
geometry = TRUE) %>%
set_names(to_snake_case(colnames(.))) %>%
filter(name %in% state.name) %>%
select(name, variable, estimate) %>%
spread(variable, estimate)
census_shp <- get_acs(
geography = "state",
variables = vars,
year = 2018,
geometry = TRUE) %>%
set_names(to_snake_case(colnames(.))) %>%
filter(name %in% state.name) %>%
select(name, variable, estimate) %>%
spread(variable, estimate)
census_api_key()
head(census_shp)
v18 <- load_variables(2018, "acs5", cache = TRUE)
View(v18)
states <- census_shp %>%
select(name)
unique(turbines$p_year)
ggplot(tubines) +
geom_histogram(aes(x = p_cap))
ggplot(turbines) +
geom_histogram(aes(x = p_cap))
ggplot(turbines) +
geom_histogram(aes(x = p_cap), binwidth = 10)
ggplot(turbines) +
geom_histogram(aes(x = p_cap), binwidth = 50)
ggplot(turbines) +
geom_histogram(aes(x = t_cap), binwidth = 50)
ggplot(turbines) +
geom_histogram(aes(x = p_year), binwidth = 50)
ggplot(turbines) +
geom_histogram(aes(x = p_year), binwidth = 60)
ggplot(turbines) +
geom_histogram(aes(x = p_year), binwidth = 80)
ggplot(turbines) +
geom_histogram(aes(x = p_year), binwidth = 20)
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap !- "9999")
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap != "9999")
63794 - 59729
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap != "9999")
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap != "9999") %>%
group_by(name, p_year) %>%
summarize(t_count = n(),
total_cap = sum(p_cap),
ave_cap = mean(p_cap),
total_t_cap = sum(t_cap),
ave_t_cap = mean(t_cap))
View(turbine_summary)
ggplot(turbines) +
geom_histogram(aes(x = t_cap), binwidth = 80)
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap != "-9999") #%>%
63794 - 58696
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap != "-9999") %>%
group_by(name, p_year) %>%
summarize(t_count = n(),
total_cap = sum(p_cap),
ave_cap = mean(p_cap),
total_t_cap = sum(t_cap),
ave_t_cap = mean(t_cap))
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap != "-9999",
year >= 2019) %>%
group_by(name, p_year) %>%
summarize(t_count = n(),
total_cap = sum(p_cap),
ave_cap = mean(p_cap),
total_t_cap = sum(t_cap),
ave_t_cap = mean(t_cap))
print(turbine_summary)
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap != "-9999",
p_year >= 2019) %>%
group_by(name, p_year) %>%
summarize(t_count = n(),
total_cap = sum(p_cap),
ave_cap = mean(p_cap),
total_t_cap = sum(t_cap),
ave_t_cap = mean(t_cap))
View(turbine_summary)
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_cap != "-9999",
t_cap != "-9999",
p_year <= 2019) %>%
group_by(name, p_year) %>%
summarize(t_count = n(),
total_cap = sum(p_cap),
ave_cap = mean(p_cap),
total_t_cap = sum(t_cap),
ave_t_cap = mean(t_cap))
View(turbine_summary)
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
t_cap != "-9999",
p_year <= 2019) #%>%
63794 - 58711
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
t_cap != "-9999",
p_year <= 2018) #%>%
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
t_cap != "-9999",
p_year <= 2018) %>%
group_by(name, p_year) %>%
summarize(t_count = n(),
total_t_cap = sum(t_cap),
ave_t_cap = mean(t_cap))
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
t_cap != "-9999",
p_year <= 2018) %>%
group_by(name, p_year) %>%
summarize(t_count = n(),
total_t_cap = sum(t_cap),
ave_t_cap = mean(t_cap))
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_year <= 2018) %>%
group_by(name, p_year) %>%
summarize(t_count = n())
View(turbine_summary)
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_year <= 2018) %>%
group_by(name) %>%
summarize(t_count = n())
View(turbine_summary)
# think about what I want to do with variable choices
# am I using capacity in the turbine data? or outside data?
turbine_counts <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
p_year <= 2018) %>%
group_by(name) %>%
summarize(t_count = n())
merged <- left_join(census_shp, turbine_counts, by = "name") %>%
mutate(turbine_count = ifelse(is.na(turbine_count), 0, turbine_count))
merged <- left_join(census_shp, turbine_counts, by = "name") %>%
mutate(turbine_count = ifelse(is.na(t_count), 0, turbine_count))
merged <- left_join(census_shp, turbine_counts, by = "name") %>%
mutate(turbine_count = ifelse(is.na(t_count), 0, t_count))
View(merged)
census_shp <- get_acs(
geography = "state",
variables = vars,
year = 2018,
geometry = TRUE) %>%
set_names(to_snake_case(colnames(.))) %>%
filter(name %in% state.name) %>%
select(name, variable, estimate) %>%
spread(variable, estimate)
states <- census_shp %>%
select(name)
vars <- c(
median_income = "B19013_001",
white = "B02001_002",
black = "B02001_003",
amer_ind = "B02001_004",
asian = "B02001_005",
na_pi = "B02001_006",
hisp = "B03001_003"
)
census_shp <- get_acs(
geography = "state",
variables = vars,
year = 2018,
geometry = TRUE) %>%
set_names(to_snake_case(colnames(.))) %>%
filter(name %in% state.name) %>%
select(name, variable, estimate) %>%
spread(variable, estimate)
states <- census_shp %>%
select(name)
states_turbines <- st_intersection(states, turbines)
turbine_counts <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
t_cap != "-9999",
p_year <= 2018) %>%
group_by(name) %>%
summarize(t_count = n(),
t_cap = sum(t_cap))
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
t_cap != "-9999",
p_year <= 2018) %>%
group_by(name) %>%
summarize(t_count = n(),
t_cap = sum(t_cap))
View(turbine_summary)
turbine_summary <- states_turbines %>%
st_set_geometry(NULL) %>%
filter(p_year != "-9999",
t_cap != "-9999",
p_year <= 2018) %>%
group_by(name) %>%
summarize(t_count = n(),
t_cap = sum(t_cap))
merged <- left_join(census_shp, turbine_summary, by = "name") %>%
mutate(turbine_count = ifelse(is.na(t_count), 0, t_count))
View(merged)
merged <- left_join(census_shp, turbine_summary, by = "name") %>%
mutate(turbine_count = ifelse(is.na(t_count), 0, t_count))
View(merged)
head(merged)
merged <- left_join(census_shp, turbine_summary, by = "name") %>%
mutate(turbine_count = ifelse(is.na(t_count), 0, t_count)) %>%
select(everything(), geometry)
head(merged)
View(turbine_summary)
merged <- left_join(census_shp, turbine_summary, by = "name") %>%
mutate(turbine_count = ifelse(is.na(t_count), 0, t_count),
t_cap = t_cap/1000) %>%
select(everything(), geometry)
head(merged)
merged <- left_join(census_shp, turbine_summary, by = "name") %>%
mutate(t_count = ifelse(is.na(t_count), 0, t_count),
t_cap = ifelse(is.na(t_cap), 0, t_cap)
t_cap = t_cap/1000) %>%
select(everything(), geometry)
merged <- left_join(census_shp, turbine_summary, by = "name") %>%
mutate(t_count = ifelse(is.na(t_count), 0, t_count),
t_cap = ifelse(is.na(t_cap), 0, t_cap)) %>%
select(everything(), geometry) %>%
mutate(t_cap = t_cap/1000)
head(mmerge())
head(merged)
write.csv(merged, "merged/turbine_census.csv", row.names=FALSE)
merged <- left_join(census_shp, turbine_summary, by = "name") %>%
mutate(t_count = ifelse(is.na(t_count), 0, t_count),
t_cap = ifelse(is.na(t_cap), 0, t_cap)) %>%
select(everything(), geometry) %>%
mutate(t_cap = t_cap/1000)
View(merged)
write.csv(merged, "merged/turbine_census.csv")
class(merged)
write_rds(merged, "merged/turbine_census.rds")
read_rds("merged/turbine_census.rds")
ggplot(merged) +
geom_sf(aes(fill = turbine_count)) +
coord_sf(xlim = c(-175, -65)) +
theme(legend.position = "none",
line = element_blank(),
rect = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_line(colour = "transparent"))
ggplot(merged) +
geom_sf(aes(fill = t_count)) +
coord_sf(xlim = c(-175, -65)) +
theme(legend.position = "none",
line = element_blank(),
rect = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_line(colour = "transparent"))
ggplot(merged) +
geom_sf(aes(fill = t_cap)) +
coord_sf(xlim = c(-175, -65)) +
theme(legend.position = "none",
line = element_blank(),
rect = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_line(colour = "transparent"))
colnames(merged)
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count))
ggplot(merged) +
geom_point(aes(x = t_count, y = median_income))
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count))
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_density()
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_density(aes(x = t_count))
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_density(aes(x = median_income))
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_density(aes(x = median_income), stat = "identity")
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_density(aes(x = median_income, y = t_count), stat = "identity")
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_smooth(aes(x = median_income, y = t_count), stat = "identity")
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count))
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_smooth(orientation = "y")
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_smooth()
ggplot(merged) +
geom_point(aes(x = median_income, y = t_count)) +
geom_smooth(span = 0.3)
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth()
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth() +
ylim(0, 20000)
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth() +
ylim(-10, 20000)
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth() +
ylim(-10, 20000)
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth()
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth() +
theme_minimal()
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth() +
labs(x = "Turbine Count",
y = "Median Income")
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth() +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
colnames(merged)
ggplot(merged, aes(x = black, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
ggplot(merged, aes(x = white, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
ggplot(merged, aes(x = white, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
inc_t <- ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
setwd("C:/Users/User02/Desktop/Harris/spatial_reg/turbines-in-space")
ggplot(merged, aes(x = median_income, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
ggsave("source/build/inc_t.png", plot = last_plot())
ggplot(merged, aes(x = white, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Median Income") +
theme_minimal()
ggsave("source/build/white_t.png", plot = last_plot())
turbines <- read_sf(
"C:/Users/User02/Desktop/Harris/spatial_reg/final_project/turbines/uswtdb_v3_0_20200417.shp")
ggplot(merged) +
geom_sf(aes(fill = t_count)) +
coord_sf(xlim = c(-175, -65)) +
theme(legend.position = "none",
line = element_blank(),
rect = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_line(colour = "transparent"))
ggsave("source/build/t_map.png", plot = last_plot())
ggplot(merged, aes(x = white, y = t_count)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(x = "Turbine Count",
y = "Population - White") +
theme_minimal()
ggsave("source/build/white_t.png", plot = last_plot())
