labs(
x = "Minutes from Accident",
y = "Number of Alerts"
) +
theme_bw()
rm(list = la())
rm(list = ls())
library(dplyr)
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
flights_db <- tbl(con, "flights")
library(tidyverse)
flights_db %>% select(year:day, dep_delay, arr_delay)
flights_db <- tbl(con, "flights")
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
flights_db <- tbl(con, "flights")
con
library(dplyr)
library(tidyverse)
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
flights_db <- tbl(con, "flights")
library(dplyr)
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
flights_db <- tbl(con, "flights")
flights_db
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
copy_to(con, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
flights_db <- tbl(con, "flights")
flights_db
flights_db %>% colnames()
flights_db %>%
filter(dest == "JFK")
flights_db %>%
filter(dest == "JFK") %>%
collect()
flights_db %>%
filter(origin == "JFK")
flights_db %>%
filter(origin == "JFK") %>%
collect()
flights_db %>%
filter(origin == "JFK") %>%
collect() %>%
sample_n(1)
flights_db %>%
filter(origin == "JFK",
max_delay = max(arr_delay)) %>%
collect()
flights_db %>%
filter(origin == "JFK",
max_delay == max(arr_delay)) %>%
collect()
flights_db %>%
filter(origin == "JFK",
arr_delay == max(arr_delay)) %>%
collect()
flights_db %>%
filter(origin == "JFK",
arr_delay == max(arr_delay)) %>%
collect() %>%
sample_n(1)
flights_db %>%
filter(origin == "JFK",
arr_delay == max(arr_delay)) %>%
collect()
flights_db %>%
filter(origin == "JFK",
arr_delay == min(arr_delay)) %>%
collect()
flights_db %>%
filter(origin == "JFK",
arr_delay == max(arr_delay)) %>%
collect()
flights_db %>%
filter(origin == "JFK") %>%
collect()
flights_db %>%
filter(origin == "JFK") %>%
collect() %>%
filter(arr_delay == max(arr_delay))
flights_db %>%
filter(origin == "JFK") %>%
collect()
temp <- flights_db %>%
filter(origin == "JFK") %>%
collect()
View(temp)
temp <- flights_db %>%
filter(origin == "JFK",
distance == max(distance)) %>%
collect()
temp <- flights_db %>%
filter(origin == "JFK",
distance == max(distance)) %>%
collect() %>%
sample_n(1)
View(temp)
temp <- flights_db %>%
filter(origin == "JFK") %>%
collect()
View(temp)
temp %>%
group_by(tailnum) %>%
summarise(mean(dep_delay), na.rm=TRUE)
temp %>%
group_by(tailnum) %>%
summarise(mean(dep_delay))
temp %>%
group_by(tailnum) %>%
summarise(mean(dep_delay, na.rm = TRUE))
get_means <- function(df, tailnum){
}
get_means <- function(df, tailnum){
df %>%
group_by(tailnum) %>%
summarise(mean(dep_delay, na.rm = TRUE))
}
map_dfr(~ mean(data = temp, tailnum = .))
map_dfr(~ get_means(data = temp, tailnum = .))
map_dfr(~ get_means(df = temp, tailnum = .))
temp %>%
distinct(tailnum, .keep_all = TRUE)
unique_tail <- temp %>%
distinct(tailnum, .keep_all = TRUE)
get_means <- function(df, tailnum){
df %>%
group_by(tailnum) %>%
summarise(mean(dep_delay, na.rm = TRUE))
}
unique_tail <- temp %>%
distinct(tailnum, .keep_all = TRUE)
unique_tail$tailnum %>%
map_dfr(~ get_means(df = temp, tailnum = .))
get_means <- function(df, tailnum){
df %>%
group_by(tailnum) %>%
summarise(mean(dep_delay, na.rm = TRUE))
}
flights_db
library(dplyr)
library(tidyverse)
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
copy_to(con, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
flights_db <- tbl(con, "flights")
library(tidyverse)
library(sf)
library(readxl)
library(snakecase)
library(tidycensus)
library(spdep)
library(spatialreg)
library(spatialprobit)
rm(list = ls())
setwd("C:/Users/User02/Desktop/Harris/spatial_reg/turbines-in-space")
merged_tx <- read_rds("data/merged/final_merge_tx.rds") %>%
mutate(median_income2 = median_income*median_income)
merged_tx <- read_rds("data/merged/final_merge_tx.rds") %>%
mutate(median_income2 = median_income*median_income)
merged_tx <- read_rds("data/merged/final_merge_tx.rds") %>%
mutate(median_income2 = median_income*median_income)
reg_vars <- merged_tx %>%
st_set_geometry(NULL) %>%
select(
-c(count_dummy, t_county, t_count, amer_ind,
asian, black, hisp, na_pi, white)
) %>%
names() %>%
paste(collapse = " + ")
reg_vars <- merged_tx %>%
st_set_geometry(NULL) %>%
select(
-c(count_dummy, t_county, t_count, amer_ind,
asian, black, hisp, na_pi, white)
) %>%
names() %>%
paste(collapse = " + ")
coords <- st_centroid(st_geometry(merged_tx), of_largest_polygon = TRUE)
neighbors_knn <- knearneigh(coords, k=4)
list_knn <- nb2listw(knn2nb(neighbors_knn))
w <- as(as_dgRMatrix_listw(list_knn), "CsparseMatrix")
temp_glm <- glm(as.formula(paste0("count_dummy ~ ", reg_vars)),
data = merged_tx,
family = binomial(link = "probit"))
sarprobit(temp_glm, w, showProgress = TRUE, ndraw = 1000)
merged_tx <- read_rds("data/merged/final_merge_tx.rds") %>%
mutate(median_income2 = median_income*median_income)
reg_vars <- merged_tx %>%
st_set_geometry(NULL) %>%
select(
-c(count_dummy, t_county, t_count, amer_ind,
asian, black, hisp, na_pi, white)
) %>%
names() %>%
paste(collapse = " + ")
coords <- st_centroid(st_geometry(merged_tx), of_largest_polygon = TRUE)
neighbors_knn <- knearneigh(coords, k=4)
list_knn <- nb2listw(knn2nb(neighbors_knn))
w <- as(as_dgRMatrix_listw(list_knn), "CsparseMatrix")
temp_glm <- glm(as.formula(paste0("count_dummy ~ ", reg_vars)),
data = merged_tx,
family = binomial(link = "probit"))
sarprobit(as.formula(paste0("count_dummy ~ ", reg_vars)),
w, showProgress = TRUE, ndraw = 1000)
sarprobit(as.formula(paste0("count_dummy ~ ", reg_vars)),
data = merged_tx,
w, showProgress = TRUE, ndraw = 1000)
merged_tx <- read_rds("data/merged/final_merge_tx.rds") #%>%
merged_tx <- read_rds("data/merged/final_merge_tx.rds") %>%
mutate(median_income2 = median_income*median_income)
sarprobit(temp_glm, w, showProgress = TRUE, ndraw = 1000)
library(spatialreg)
sarprobit(temp_glm, w, showProgress = TRUE, ndraw = 1000)
summary(temp_glm)
merged_tx <- read_rds("data/merged/final_merge_tx.rds") #%>%
reg_vars <- merged_tx %>%
st_set_geometry(NULL) %>%
select(
-c(count_dummy, t_county, t_count, amer_ind,
asian, black, hisp, na_pi, white)
) %>%
names() %>%
paste(collapse = " + ")
temp_glm <- glm(as.formula(paste0("count_dummy ~ ", reg_vars)),
data = merged_tx,
family = binomial(link = "probit"))
summary(temp_glm)
sarprobit(temp_glm, w, showProgress = TRUE, ndraw = 1000)
lag_probit <- sarprobit(temp_glm, w, showProgress = TRUE, ndraw = 1000)
impacts(lag_probit)
summary(lag_probit)
merged_tx <- read_rds("data/merged/final_merge_tx.rds")
ggplot(merged_tx) +
geom_sf(aes(fill = t_count)) +
theme(legend.position = "none",
line = element_blank(),
rect = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_line(colour = "transparent"))
reg_vars <- merged_tx %>%
st_set_geometry(NULL) %>%
select(
-c(count_dummy, t_county, t_count, amer_ind,
asian, black, hisp, na_pi, white)
) %>%
names() %>%
paste(collapse = " + ")
coords <- st_centroid(st_geometry(merged_tx))
neighbors_queen <- poly2nb(merged_tx)
list_queen <- nb2listw(neighbors_queen)
coords <- st_centroid(st_geometry(merged_tx), of_largest_polygon = TRUE)
coords <- st_centroid(st_geometry(merged_tx), of_largest_polygon = TRUE)
neighbors_queen <- poly2nb(merged_tx)
list_queen <- nb2listw(neighbors_queen)
plot(st_geometry(merged_tx), border='grey')
plot(neighbors_queen, coords, add = TRUE)
hist(card(neighbors_queen),
col = "grey",
main = "Connectivity Histogram",
breaks = seq(-0.5, 9.5, by = 1))
neighbors_knn <- knearneigh(coords, k=4)
list_knn <- nb2listw(knn2nb(neighbors_knn))
w <- as(as_dgRMatrix_listw(list_queen), "CsparseMatrix")
reg_glm <- glm(as.formula(paste0("count_dummy ~ ", reg_vars)),
data = merged_tx,
family = binomial(link = "probit"))
reg_vars
reg_glm <- glm(as.formula(paste0("count_dummy ~ ", reg_vars)),
data = merged_tx,
family = binomial(link = "probit"))
summary(temp_glm)
lag_probit <- sarprobit(temp_glm, w, showProgress = TRUE, ndraw = 1000)
impacts(lag_probit)
summary(lag_probit)
plot(lag_probit)
error_probit <- semprobit(temp_glm, w, showProgress = TRUE, ndraw = 1000)
summary(error_probit)
library(dplyr)
library(tidyverse)
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
copy_to(con, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
library(dplyr)
library(tidyverse)
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
copy_to(con, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
flights_db <- tbl(con, "flights")
head(flights_db)
library(dplyr)
library(tidyverse)
library(lubridate)
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
copy_to(con, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
flights_db <- tbl(con, "flights")
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
copy_to(con, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
flights_db <- tbl(con, "flights")
flights <- flights_db %>%
filter(month == 5, day == 5) %>%
collect()
flights <- tibble::rowid_to_column(flights, "flight_id")
rm(list = ls())
con <- DBI::dbConnect(RSQLite::SQLite(),
path = ":memory:")
copy_to(con, nycflights13::flights, "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
flights_db <- tbl(con, "flights")
flights <- flights_db %>%
filter(month == 5, day == 5) %>%
collect()
flights <- tibble::rowid_to_column(flights, "flight_id")
View(flights)
get_round_time <- function(dep_time) {
hours <- dep_time %/% 100
minutes <- dep_time %% 100
total_minutes <- (60*hours) + minutes
rounded_minutes <- round(total_minutes, digits = -1)
}
flights <- flights %>%
mutate(round_dep_time = get_round_time(dep_time)) %>%
select(flight_id, dep_time, round_dep_time, dep_delay, tailnum, flight, origin, dest)
head(flights)
very_delayed_flights <- flights %>% filter(dep_delay >= 120)
very_delayed_flights
delayed_flight <- data %>% filter(flight_id == 399)
delayed_flight <- flights %>% filter(flight_id == 399)
View(delayed_flight)
delayed_flight <- flights %>% filter(flight_id == 399)
delayed_flight <- flights %>% filter(flight_id == 399)
surrounding_delayed_flights <- flights %>%
# Select flights which are delayed, and which occur within 120 minutes
# of the delayed flight's departure time
filter(
dep_delay >= 20,
between(
round_dep_time,
delayed_flight$round_dep_time - 120,
delayed_flight$round_dep_time + 120)
) %>%
# Get counts of the number of delayed flights for each
# interval surrounding the extremely delayed flight
group_by(round_dep_time) %>%
summarize(n_delayed_flights = n()) %>%
mutate(offset_from_extreme_delay = round_dep_time - delayed_flight$round_dep_time) %>%
select(-round_dep_time)
surrounding_delayed_flights
get_surrounding_delay_counts <- function(data, fid) {
delayed_flight <- data %>% filter(flight_id == fid)
surrounding_delayed_flights <- flights %>%
filter(
dep_delay >= 20,
between(
round_dep_time,
delayed_flight$round_dep_time - 120,
delayed_flight$round_dep_time + 120)
) %>%
group_by(round_dep_time) %>%
summarize(n_delayed_flights = n()) %>%
mutate(offset_from_extreme_delay = round_dep_time - delayed_flight$round_dep_time) %>%
select(-round_dep_time)
return(surrounding_delayed_flights)
}
func_test <- get_surrounding_delay_counts(data=flights, fid=399)
func_test
surrounding_delayed_flights
fid_list <- very_delayed_flights$flight_id
func_apply <- lapply(X=fid_list, FUN=get_surrounding_delay_counts, data=flights)
func_apply
all_surrounding_delay_counts <- fid_list %>%
map_dfr(~ get_surrounding_delay_counts(data=flights, fid=.))
all_surrounding_delay_counts
fid_list <- very_delayed_flights$flight_id %>%
colnames()
fid_list <- very_delayed_flights$flight_id %>%
sample_n(2)
fid_list <- very_delayed_flights$flight_id
fid_list_sample <- sample(fid_list, 3)
map_sample <- fid_list_sample %>%
map_dfr(~ get_surrounding_delay_counts(data=flights, fid=.))
map_sample
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(tidyverse)
library(lubridate)
delayed_flight <- flights %>% filter(flight_id == 399)
surrounding_delayed_flights <- flights %>%
filter(
dep_delay >= 20,
between(
round_dep_time,
delayed_flight$round_dep_time - 120,
delayed_flight$round_dep_time + 120)
) %>%
group_by(round_dep_time) %>%
summarize(n_delayed_flights = n()) %>%
mutate(offset_from_extreme_delay = round_dep_time - delayed_flight$round_dep_time) %>%
select(-round_dep_time)
surrounding_delayed_flights
fid_list <- very_delayed_flights$flight_id
func_apply <- lapply(X=fid_list, FUN=get_surrounding_delay_counts, data=flights)
func_apply
knitr::opts_chunk$set(echo = TRUE)
options(width = 50, tibble.print_min = 4, digits = 3)
library(tidyverse)
knitr::knit_hooks$set(mysize = function(before, options, envir) {
if (before)
return(options$size)
})
flights_db <- tbl(con, "flights")
flights <- flights_db %>%
filter(month == 5, day == 5) %>%
collect()
flights <- tibble::rowid_to_column(flights, "flight_id")
get_round_time <- function(dep_time) {
hours <- dep_time %/% 100
minutes <- dep_time %% 100
total_minutes <- (60*hours) + minutes
rounded_minutes <- round(total_minutes, digits = -1)
}
flights <- flights %>%
mutate(round_dep_time = get_round_time(dep_time)) %>%
select(flight_id, dep_time, round_dep_time, dep_delay, tailnum, flight, origin, dest)
head(flights)
very_delayed_flights <- flights %>% filter(dep_delay >= 120)
very_delayed_flights
delayed_flight <- flights %>% filter(flight_id == 399)
surrounding_delayed_flights <- flights %>%
# Select flights which are delayed, and which occur within 120 minutes
# of the delayed flight's departure time
filter(
dep_delay >= 20,
between(
round_dep_time,
delayed_flight$round_dep_time - 120,
delayed_flight$round_dep_time + 120)
) %>%
# Get counts of the number of delayed flights for each
# interval surrounding the extremely delayed flight
group_by(round_dep_time) %>%
summarize(n_delayed_flights = n()) %>%
mutate(offset_from_extreme_delay = round_dep_time - delayed_flight$round_dep_time) %>%
select(-round_dep_time)
surrounding_delayed_flights
View(surrounding_delayed_flights)
View(delayed_flight)
diamonds
lapply(diamonds, class)
mtcars
iris
